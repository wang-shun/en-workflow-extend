<?xml version="1.0" encoding="UTF-8" ?> 

<!--
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->


<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
  
<mapper namespace="org.activiti.engine.impl.persistence.entity.taskretrievalexternaltable">

  <!-- TASK INSERT -->
  
<!--   <insert id="insertTask" parameterType="org.activiti.engine.impl.persistence.entity.TaskEntity">
    insert into ${prefix}ACT_RU_TASK (ID_, REV_, NAME_, PARENT_TASK_ID_, DESCRIPTION_, PRIORITY_, CREATE_TIME_, OWNER_,
                      ASSIGNEE_, DELEGATION_, EXECUTION_ID_, PROC_INST_ID_, PROC_DEF_ID_, TASK_DEF_KEY_, DUE_DATE_, CATEGORY_, SUSPENSION_STATE_, TENANT_ID_)
    values (#{id, jdbcType=VARCHAR},
            1,
            #{name, jdbcType=VARCHAR},
            #{parentTaskId, jdbcType=VARCHAR},
            #{description, jdbcType=VARCHAR},
            #{priority, jdbcType=INTEGER},
            #{createTime, jdbcType=TIMESTAMP},
            #{owner, jdbcType=VARCHAR},
            #{assignee, jdbcType=VARCHAR},
            #{delegationStateString, jdbcType=VARCHAR},
            #{executionId, jdbcType=VARCHAR},
            #{processInstanceId, jdbcType=VARCHAR},
            #{processDefinitionId, jdbcType=VARCHAR},
            #{taskDefinitionKey, jdbcType=VARCHAR},
            #{dueDate, jdbcType=TIMESTAMP},
            #{category, jdbcType=VARCHAR},
            #{suspensionState, jdbcType=INTEGER},
            #{tenantId, jdbcType=VARCHAR}
           )
  </insert> -->
  
  <!-- TASK UPDATE -->
  
<!--   <update id="updateTask" parameterType="org.activiti.engine.impl.persistence.entity.TaskEntity">
    update ${prefix}ACT_RU_TASK
    <set>
      REV_ = #{revisionNext, jdbcType=INTEGER},
      NAME_ = #{name, jdbcType=VARCHAR},
      PARENT_TASK_ID_ = #{parentTaskId, jdbcType=VARCHAR},
      PRIORITY_ = #{priority, jdbcType=INTEGER},
      CREATE_TIME_ = #{createTime, jdbcType=TIMESTAMP},
      OWNER_ = #{owner, jdbcType=VARCHAR},
      ASSIGNEE_ = #{assignee, jdbcType=VARCHAR},
      DELEGATION_ = #{delegationStateString, jdbcType=VARCHAR},
      EXECUTION_ID_ = #{executionId, jdbcType=VARCHAR},
      PROC_DEF_ID_ = #{processDefinitionId, jdbcType=VARCHAR},
      DESCRIPTION_ = #{description, jdbcType=VARCHAR},
      DUE_DATE_ = #{dueDate, jdbcType=TIMESTAMP},
      CATEGORY_ = #{category, jdbcType=VARCHAR},
      SUSPENSION_STATE_ = #{suspensionState, jdbcType=INTEGER}
    </set>
    where ID_= #{id, jdbcType=VARCHAR}
      and REV_ = #{revision, jdbcType=INTEGER}
  </update> -->
  
<!--   <update id="updateTaskTenantIdForDeployment" parameterType="java.util.Map">
    update ${prefix}ACT_RU_TASK set
      TENANT_ID_ = #{tenantId, jdbcType=VARCHAR}
    where
      ID_ in (
        SELECT T.ID_ from ${prefix}ACT_RU_TASK T
        inner join ${prefix}ACT_RE_PROCDEF P on T.PROC_DEF_ID_  = P.ID_
        inner join ${prefix}ACT_RE_DEPLOYMENT D on P.DEPLOYMENT_ID_ = D.ID_ 
        where D.ID_ = #{deploymentId, jdbcType=VARCHAR}
      ) 
  </update> -->
  
    <!-- See http://stackoverflow.com/questions/4429319/you-cant-specify-target-table-for-update-in-from-clause
       Tested this on MySQL 5.6: does NOT use a temporary table (so good, performance0 -->
<!--   <update id="updateTaskTenantIdForDeployment_mysql" parameterType="java.util.Map">
    update ${prefix}ACT_RU_TASK set
      TENANT_ID_ = #{tenantId, jdbcType=VARCHAR}
    where
      ID_ in (

          SELECT tempTask.tempId
          FROM (
                SELECT T.ID_ as tempId
                FROM  ${prefix}ACT_RU_TASK T
                inner join ${prefix}ACT_RE_PROCDEF P on T.PROC_DEF_ID_  = P.ID_
                inner join ${prefix}ACT_RE_DEPLOYMENT D on P.DEPLOYMENT_ID_ = D.ID_ 
                where D.ID_ = #{deploymentId, jdbcType=VARCHAR}
                
        ) AS tempTask 

    )
  </update> -->
  
  <!-- TASK DELETE -->
<!--   <delete id="deleteTask" parameterType="org.activiti.engine.impl.persistence.entity.TaskEntity">
    delete from ${prefix}ACT_RU_TASK where ID_ = #{id} and REV_ = #{revision}
  </delete> -->
  
  <!-- TASK RESULTMAP -->
  
  <resultMap id="taskResultMap" type="org.activiti.engine.impl.persistence.entity.TaskEntity">
    <id property="id" column="ID_" jdbcType="VARCHAR"/>
    <result property="revision" column="REV_" jdbcType="INTEGER"/>
    <result property="nameWithoutCascade" column="NAME_" jdbcType="VARCHAR"/>
    <result property="parentTaskIdWithoutCascade" column="PARENT_TASK_ID_" jdbcType="VARCHAR"/>
    <result property="descriptionWithoutCascade" column="DESCRIPTION_" jdbcType="VARCHAR"/>
    <result property="priorityWithoutCascade" column="PRIORITY_" jdbcType="INTEGER"/>
    <result property="createTime" column="CREATE_TIME_" jdbcType="TIMESTAMP" />
    <result property="ownerWithoutCascade" column="OWNER_" jdbcType="VARCHAR"/>
    <result property="assigneeWithoutCascade" column="ASSIGNEE_" jdbcType="VARCHAR"/>
    <result property="delegationStateString" column="DELEGATION_" jdbcType="VARCHAR"/>
    <result property="executionId" column="EXECUTION_ID_" jdbcType="VARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR"/>
    <result property="taskDefinitionKeyWithoutCascade" column="TASK_DEF_KEY_" jdbcType="VARCHAR"/>
    <result property="dueDateWithoutCascade" column="DUE_DATE_" jdbcType="TIMESTAMP"/>
    <result property="categoryWithoutCascade" column="CATEGORY_" jdbcType="VARCHAR" />
    <result property="suspensionState" column="SUSPENSION_STATE_" jdbcType="INTEGER" />
    <result property="tenantId" column="TENANT_ID_" jdbcType="VARCHAR" />
  </resultMap>
  
  <resultMap id="taskAndVariablesResultMap" type="org.activiti.engine.impl.persistence.entity.TaskEntity">
    <id property="id" column="ID_" jdbcType="VARCHAR"/>
    <result property="revision" column="REV_" jdbcType="INTEGER"/>
    <result property="nameWithoutCascade" column="NAME_" jdbcType="VARCHAR"/>
    <result property="parentTaskIdWithoutCascade" column="PARENT_TASK_ID_" jdbcType="VARCHAR"/>
    <result property="descriptionWithoutCascade" column="DESCRIPTION_" jdbcType="VARCHAR"/>
    <result property="priorityWithoutCascade" column="PRIORITY_" jdbcType="INTEGER"/>
    <result property="createTime" column="CREATE_TIME_" jdbcType="TIMESTAMP" />
    <result property="ownerWithoutCascade" column="OWNER_" jdbcType="VARCHAR"/>
    <result property="assigneeWithoutCascade" column="ASSIGNEE_" jdbcType="VARCHAR"/>
    <result property="delegationStateString" column="DELEGATION_" jdbcType="VARCHAR"/>
    <result property="executionId" column="EXECUTION_ID_" jdbcType="VARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR"/>
    <result property="taskDefinitionKeyWithoutCascade" column="TASK_DEF_KEY_" jdbcType="VARCHAR"/>
    <result property="dueDateWithoutCascade" column="DUE_DATE_" jdbcType="TIMESTAMP"/>
    <result property="categoryWithoutCascade" column="CATEGORY_" jdbcType="VARCHAR" />
    <result property="suspensionState" column="SUSPENSION_STATE_" jdbcType="INTEGER" />
    <result property="tenantId" column="TENANT_ID_" jdbcType="VARCHAR" />
<!--     <collection property="queryVariables" column="TASK_ID_" javaType="ArrayList" ofType="org.activiti.engine.impl.persistence.entity.VariableInstanceEntity">
      <id property="id" column="VAR_ID_"/>
      <result property="name" column="VAR_NAME_" javaType="String" jdbcType="VARCHAR" />
      <result property="type" column="VAR_TYPE_" javaType="org.activiti.engine.impl.variable.VariableType" jdbcType="VARCHAR" />
      <result property="revision" column="VAR_REV_" jdbcType="INTEGER" />
      <result property="processInstanceId" column="VAR_PROC_INST_ID_" jdbcType="VARCHAR" />
      <result property="executionId" column="VAR_EXECUTION_ID_" jdbcType="VARCHAR" />
      <result property="taskId" column="VAR_TASK_ID_" jdbcType="VARCHAR" />
      <result property="byteArrayRef" column="VAR_BYTEARRAY_ID_" typeHandler="ByteArrayRefTypeHandler"/>
      <result property="doubleValue" column="VAR_DOUBLE_" jdbcType="DOUBLE" />
      <result property="textValue" column="VAR_TEXT_" jdbcType="VARCHAR" />
      <result property="textValue2" column="VAR_TEXT2_" jdbcType="VARCHAR" />
      <result property="longValue" column="VAR_LONG_" jdbcType="BIGINT" />
    </collection> -->
  </resultMap>

  <!-- TASK SELECT -->  

<!--   <select id="selectTask" parameterType="string" resultMap="taskResultMap">
   select * from ${prefix}ACT_RU_TASK where ID_ = #{id}
  </select> -->
  <select id="selectETCustomTaskCount" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultType="long">
    select count(RES.ID_)
    <include refid="selectETCustomTaskByQueryCriteriaSql"/>
  </select>
  
  <select id="selectETCustomTaskList" parameterType="org.activiti.engine.impl.TaskQueryImpl" resultType="java.util.HashMap">
    ${limitBefore}
    select RES.* ${limitBetween}
    <!-- 把任务处理人名字选出来 -->
    <!-- involved work 去重了 就不能把名字选出来了 -->
    <!-- FIXME 涉及到自身的正在处理中的工单 从任务表中去查询是不是思路有点不对 应该要去查流程实例表  条件为 未完成 涉及到我 -->
	<if test="involvedUser == null">
		,(SELECT GG.NAME_ FROM ACT_ID_GROUP GG WHERE GG.ID_ = I.GROUP_ID_) AS GROUP_NAME
		,(SELECT UU.LAST_ FROM ACT_ID_USER UU WHERE UU.ID_ = I.USER_ID_) AS USER_NAME	
	</if>

<!--     外部的表加入结果集 -->
    <foreach collection="forms" index="index" item="var">
         , T${index}.* 
    </foreach> 
    
    <foreach collection="sortableValues" index="index" item="var">
    	<choose>
    		<when test="!var.isFieldStorageExt">
	  	    	<choose>
		    	<!-- sla剩余时间排序单独处理 -->
		    		<when test="var.orderProperty.equals('happenedtimel') ">
		    		,O1.TEXT_ AS HAPPEN_TIME
		    		,O2.LONG_ as ACCEPT_LIMIT
		    		,O3.LONG_ as HANDLE_LIMIT
		    		</when>
		    		<otherwise>
				     	<if test="var.textValue != null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null">
				          , O${index}.TEXT_ as O${index}
				        </if>
				        <if test="var.textValue2 != null">
				          , O${index}.TEXT2_ as O${index}
				        </if>
				        <if test="var.longValue != null">
				          , O${index}.LONG_ as O${index}
				        </if>
				        <if test="var.doubleValue != null">
				          , O${index}.DOUBLE_ as O${index}
				        </if>   		
		    		</otherwise>
		    	</choose>  		
    		</when>
			<otherwise>
			
			</otherwise>
    	</choose>

      <!--   Null variable type -->
<!--         <if test="var.textValue == null &amp;&amp; var.textValue2 == null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null">
          <choose>
            <when test="var.operator.equals('NOT_EQUALS')">
              and (A${index}.TEXT_ is not null or A${index}.TEXT2_ is not null or A${index}.LONG_ is not null or A${index}.DOUBLE_ is not null or A${index}.BYTEARRAY_ID_ is not null)
            </when>
            <otherwise>
              and A${index}.TEXT_ is null and A${index}.TEXT2_ is null and A${index}.LONG_ is null and A${index}.DOUBLE_ is null and A${index}.BYTEARRAY_ID_ is null
            </otherwise>
          </choose>          
        </if> -->
    </foreach>
    
    <include refid="selectETCustomTaskByQueryCriteriaSql"/> 
    <!-- ORDER BY -->
 	<choose>
 		<when test="sortableValues.size > 0">
		    <foreach collection="sortableValues" index="index" item="var">
		    
		     	<choose>
		    		<when test="!var.isFieldStorageExt">
			           	<choose>
			    		<!-- sla剩余时间排序单独处理 -->
			    		<when test="var.orderProperty.equals('happenedtimel') ">
			    		ORDER BY ACCEPT_LIMIT+HANDLE_LIMIT+HAPPEN_TIME-unix_timestamp(now())*1000 ${var.orderDirection}
			    		</when>	
			    		<otherwise>
				    	ORDER BY O${index} ${var.orderDirection}
				    	</otherwise>	    
				    	</choose>		
		    		</when>
					<otherwise>
					<!-- 只能连接一张业务表。多张不支持  也就是说前面forms，请保持size为1-->
						<choose>
							<when test="var.tableCol != null">
							ORDER BY T0.${var.tableCol} ${var.orderDirection}
							</when>
							<otherwise>
							ORDER BY T0.${var.orderProperty} ${var.orderDirection}
							</otherwise>
						</choose>
						
					</otherwise>
		    	</choose>
		    

		    </foreach> 			
 		</when>
 		<otherwise>
 			${orderBy}
 		</otherwise>
 	</choose>
    ${limitAfter}
  </select>
  
  
    <sql id="selectETCustomTaskByQueryCriteriaSql">  
    <choose>
    	<when test="involvedUser != null">
    		from ${prefix}(
    		     		<!-- 正在处理的涉及到自身的工单去重 -->
						SELECT
							*
						FROM
							(
								SELECT
									ROW_NUMBER () OVER (
										PARTITION BY PROC_INST_ID_
										ORDER BY
											TASK_DEF_KEY_
									) AS ROW_NUMBER,
									T .*
								FROM
									ACT_RU_TASK T
							)
						WHERE
							ROW_NUMBER = 1
					) RES
    	</when>
    	<otherwise>
    		from ${prefix}ACT_RU_TASK RES
    	</otherwise>
    </choose>
    
    <include refid="commonselectETCustomTaskByQueryCriteriaSql"/>
  </sql>
  
  
  <sql id="commonselectETCustomTaskByQueryCriteriaSql">
    <if test="candidateUser != null || candidateGroups != null || bothCandidateAndAssigned">
      inner join ${prefix}ACT_RU_IDENTITYLINK I on I.TASK_ID_ = RES.ID_
    </if>  
     <foreach collection="sortableValues" index="index" item="var">
     
   		     <choose>
	    		<when test="!var.isFieldStorageExt">
			        <choose>
			    	<!-- sla剩余时间排序单独处理 -->
			    		<when test="var.orderProperty.equals('happenedtimel') ">
							inner join ${prefix}ACT_RU_VARIABLE O1 on RES.PROC_INST_ID_ = O1.PROC_INST_ID_
							inner join ${prefix}ACT_RU_VARIABLE O2 on RES.PROC_INST_ID_ = O2.PROC_INST_ID_
							inner join ${prefix}ACT_RU_VARIABLE O3 on RES.PROC_INST_ID_ = O3.PROC_INST_ID_
			    		</when>
			    		<otherwise>
			    			inner join ${prefix}ACT_RU_VARIABLE O${index} on RES.PROC_INST_ID_ = O${index}.PROC_INST_ID_ 
			    		</otherwise>
			    	</choose>		
	    		</when>
				<otherwise>
				
				</otherwise>
	    	</choose>

    </foreach> 
    
    <foreach collection="queryVariableValues" index="index" item="var">
      <choose>
        <when test="var.local">
          inner join ${prefix}ACT_RU_VARIABLE A${index} on RES.ID_ = A${index}.TASK_ID_ 
        </when>
        <otherwise>
          inner join ${prefix}ACT_RU_VARIABLE A${index} on RES.PROC_INST_ID_ = A${index}.PROC_INST_ID_ 
        </otherwise>
      </choose>       
    </foreach>
 <!-- 外部的表， 只能连接一张业务表。多张不支持  也就是说前面forms，请保持size为1-->
     <foreach collection="forms" index="index" item="var">
          inner join ${var.tableName} T${index} on RES.PROC_INST_ID_ = T${index}.${var.remark2}   
    </foreach>     
    
<!--  外部表查询字段  正如上面所说 只能连接一张业务表。多张不支持  也就是说前面forms，请保持size为1--> 
    <foreach collection="queriableFields" index="index" item="var">
    	<if test="forms[0] != null &amp;&amp; forms[0].tableName != null &amp;&amp; var.tableCol != null">
    		inner join ${forms[0].tableName} B${index} on RES.PROC_INST_ID_ = B${index}.${forms[0].remark2}   
    	</if>     
    </foreach>    
    
    <if test="processDefinitionKey != null || processDefinitionKeyLike != null || processDefinitionName != null || processDefinitionNameLike != null">
      	  inner join ${prefix}ACT_RE_PROCDEF D on RES.PROC_DEF_ID_ = D.ID_
    </if>
    <if test="processInstanceBusinessKey != null || processInstanceBusinessKeyLike != null">
        inner join ${prefix}ACT_RU_EXECUTION E on RES.PROC_INST_ID_ = E.ID_
    </if>
<!--     把任务处理人名字选出来 -->
<!-- 		involved work 去重 注释掉下面 -->
<!-- 	<if test="involvedUser != null">
	INNER JOIN ACT_RU_IDENTITYLINK I ON RES.ID_ = I.TASK_ID_
	</if> -->
    <where> 
      <if test="taskId != null">
        RES.ID_ = #{taskId}
      </if>
      <if test="name != null">
        and RES.NAME_ = #{name}
      </if>
      <if test="nameLike != null">
        and RES.NAME_ like #{nameLike}
      </if>
      <if test="description != null">
        and RES.DESCRIPTION_ = #{description}
      </if>
      <if test="descriptionLike != null">
        and RES.DESCRIPTION_ like #{descriptionLike}
      </if>
      <if test="priority != null">
        and RES.PRIORITY_ = #{priority}
      </if> 
      <if test="minPriority != null">
        and RES.PRIORITY_ &gt;= #{minPriority}
      </if> 
      <if test="maxPriority != null">
        and RES.PRIORITY_ &lt;= #{maxPriority}
      </if> 
      <if test="assignee != null">
        and RES.ASSIGNEE_ = #{assignee}
      </if>
      <if test="assigneeLike != null">
        and RES.ASSIGNEE_ like #{assigneeLike}
      </if>
      <if test="owner != null">
        and RES.OWNER_ = #{owner}
      </if>
      <if test="ownerLike != null">
        and RES.OWNER_ like #{ownerLike}
      </if>
      <if test="unassigned">
        and RES.ASSIGNEE_ IS NULL
      </if>
      <if test="noDelegationState">
        and RES.DELEGATION_ IS NULL
      </if>
      <if test="delegationState != null">
        and RES.DELEGATION_ = #{delegationStateString}
      </if>
      <if test="processInstanceId != null">
        and RES.PROC_INST_ID_ = #{processInstanceId}
      </if>
      <if test="processInstanceBusinessKey != null">
        and E.BUSINESS_KEY_ = #{processInstanceBusinessKey}
      </if>
      <if test="processInstanceBusinessKeyLike != null">
        and E.BUSINESS_KEY_ like #{processInstanceBusinessKeyLike}
      </if>         
      <if test="executionId != null">
        and RES.EXECUTION_ID_ = #{executionId}
      </if>
      <if test="createTime != null">
        and RES.CREATE_TIME_ = #{createTime}
      </if>
      <if test="createTimeBefore != null">
        and RES.CREATE_TIME_ &lt; #{createTimeBefore}
      </if>
      <if test="createTimeAfter != null">
        and RES.CREATE_TIME_ &gt; #{createTimeAfter}
      </if>
      <if test="key != null">
        and RES.TASK_DEF_KEY_ = #{key}
      </if>
      <if test="keyLike != null">
        and RES.TASK_DEF_KEY_ like #{keyLike}
      </if>
      <if test="processDefinitionId != null">
        and RES.PROC_DEF_ID_ = #{processDefinitionId}
      </if>
      <if test="processDefinitionKey != null">
        and D.KEY_ = #{processDefinitionKey}
      </if>
      <if test="processDefinitionKeyLike != null">
        and D.KEY_ like #{processDefinitionKeyLike}
      </if>
      <if test="processDefinitionName != null">
        and D.NAME_ = #{processDefinitionName}
      </if>
      <if test="processDefinitionNameLike != null">
        and D.NAME_ like #{processDefinitionNameLike}
      </if>
      <if test="dueDate != null">
        and RES.DUE_DATE_ = #{dueDate}
      </if>
      <if test="dueBefore != null">
        and RES.DUE_DATE_ &lt; #{dueBefore}
      </if>
      <if test="dueAfter != null">
        and RES.DUE_DATE_ &gt; #{dueAfter}
      </if>
      <if test="withoutDueDate">
        and RES.DUE_DATE_ is null
      </if>
      <if test="dueDate != null || dueBefore != null || dueAfter != null">
        and RES.DUE_DATE_ is not null
      </if>
      <if test="category != null">
        and RES.CATEGORY_ = #{category}
      </if>
      <if test="excludeSubtasks">
        and RES.PARENT_TASK_ID_ IS NULL
      </if>
      <if test="candidateUser != null || candidateGroups != null">
        and RES.ASSIGNEE_ is null
        and I.TYPE_ = 'candidate'
        and 
        ( 
          <if test="candidateUser != null">
            I.USER_ID_ = #{candidateUser}          
          </if>
          <if test="candidateUser != null &amp;&amp; candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0">
            or
          </if>
          <if test="candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0">
            I.GROUP_ID_ IN
            <foreach item="group" index="index" collection="candidateGroups" 
                     open="(" separator="," close=")">
              #{group}
            </foreach>
          </if>
        )
      </if>
      <if test="involvedUser != null">
        and (
          <!-- exists(select LINK.USER_ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where USER_ID_ = #{involvedUser} and LINK.TASK_ID_ = RES.ID_) -->
  <!--         涉及到的工单 改成这样吧 这样应该就是 我自己参与过的流程都能查询出来 -->
	         exists(select LINK.USER_ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where USER_ID_ = #{involvedUser} and LINK .PROC_INST_ID_ = RES.PROC_INST_ID_)
	         or RES.ASSIGNEE_ = #{involvedUser}
	         or RES.OWNER_ = #{involvedUser}
	         )
<!-- 							AND RES.ASSIGNEE_ <> #{involvedUser}					 
 							AND RES.ASSIGNEE_ IS NOT NULL -->
<!-- 			AND I.USER_ID_ &lt;&gt; #{involvedUser}
			OR I.GROUP_ID_ NOT IN (
				SELECT
					G .GROUP_ID_
				FROM
					ACT_ID_MEMBERSHIP G
				WHERE
					G .USER_ID_ = #{involvedUser}
			) -->
			<!-- 去除待办中有的项 -->
			AND NOT EXISTS (
				SELECT
					LINK1 .USER_ID_
				FROM
					ACT_RU_IDENTITYLINK LINK1
				WHERE
				(
					LINK1.USER_ID_ = #{involvedUser}
					OR LINK1.GROUP_ID_ IN (
						SELECT
							G .GROUP_ID_
						FROM
							ACT_ID_MEMBERSHIP G
						WHERE
							G .USER_ID_ = #{involvedUser}
					)
				)
				AND LINK1.TASK_ID_ = RES.ID_
			)				
      </if>
      <foreach item="var" collection="sortableValues" index="index">
      
		     	<choose>
		    		<when test="!var.isFieldStorageExt">
			           	<choose>
			    	<!-- sla剩余时间排序单独处理 -->
			    		<when test="var.orderProperty.equals('happenedtimel') ">
			 		           <!--  排序，针对流程变量排序 taskId要为空 -->
					         	and O1.TASK_ID_ is null    
					         <if test="var.orderProperty != null">
					          	and O1.NAME_= #{var.orderProperty}
					        </if>    	
					        	and O2.TASK_ID_ is null  	
					        	and O2.NAME_= 'acceptLimitl'
					        	and O3.TASK_ID_ is null  	
					        	and O3.NAME_= 'handleLimitl'		        	
			    		</when>
			    		<otherwise>
					           <!--  排序，针对流程变量排序 taskId要为空 -->
					          and O${index}.TASK_ID_ is null    
					         <if test="var.orderProperty != null">
					       	<!--  Match-all variable-names when name is null -->
					          and O${index}.NAME_= #{var.orderProperty}
					        </if> 
						<!-- 注释掉下面的话， 要保证没有重属性名字的变量 -->
					 	<!-- <if test="!var.type.equals('null')">
					          and O${index}.TYPE_ = #{var.type}
					        </if>  -->      		
			    		</otherwise>
			    		</choose>
 		
		    		</when>
					<otherwise>
					
					</otherwise>
		    	</choose>
      

     
      </foreach>
     
      <foreach item="var" collection="queryVariableValues" index="index">
        <if test="!var.local">
         <!--  When process instance variable is queried for, taskId should be null -->
          and A${index}.TASK_ID_ is null
        </if>
        <if test="var.name != null">
       <!--    Match-all variable-names when name is null -->
          and A${index}.NAME_= #{var.name}
        </if>
        <if test="!var.type.equals('null')">
          and A${index}.TYPE_ = #{var.type}
        </if>
      <!--   Variable value -->
        <if test="var.textValue != null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null">
          <choose>
            <when test="var.operator.equals('EQUALS_IGNORE_CASE') || var.operator.equals('NOT_EQUALS_IGNORE_CASE')">
              and lower(A${index}.TEXT_)
            </when>
            <otherwise>
              and A${index}.TEXT_
            </otherwise>
          </choose> 
          <choose>
              <when test="var.operator.equals('LIKE')">LIKE</when>
              <otherwise><include refid="executionVariableOperator" /></otherwise>
          </choose>          
          #{var.textValue}
        </if>
        <if test="var.textValue2 != null">
          and A${index}.TEXT2_ 
          <choose>
            <when test="var.operator.equals('LIKE')">LIKE</when>
            <otherwise><include refid="executionVariableOperator" /></otherwise>
          </choose>          
          #{var.textValue2}
        </if>
        <if test="var.longValue != null">
          and A${index}.LONG_
          <include refid="executionVariableOperator" />
          #{var.longValue}
        </if>
        <if test="var.doubleValue != null">
          and A${index}.DOUBLE_ 
          <include refid="executionVariableOperator" />
          #{var.doubleValue}
        </if>
      <!--   Null variable type -->
        <if test="var.textValue == null &amp;&amp; var.textValue2 == null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null">
          <choose>
            <when test="var.operator.equals('NOT_EQUALS')">
              and (A${index}.TEXT_ is not null or A${index}.TEXT2_ is not null or A${index}.LONG_ is not null or A${index}.DOUBLE_ is not null or A${index}.BYTEARRAY_ID_ is not null)
            </when>
            <otherwise>
              and A${index}.TEXT_ is null and A${index}.TEXT2_ is null and A${index}.LONG_ is null and A${index}.DOUBLE_ is null and A${index}.BYTEARRAY_ID_ is null
            </otherwise>
          </choose>          
        </if>
      </foreach>
<!--       外部表单 -->
      <foreach item="var" collection="queriableFields" index="index">
         <if test="var.tableCol != null">
          and B${index}.${var.tableCol} 
          <choose>
              <when test="var.operator.equals('LIKE')">LIKE</when>
              <otherwise><include refid="executionVariableOperator" /></otherwise>
          </choose>
          #{var.value}
          </if>
      </foreach>
      
      <if test="suspensionState != null">
        <if test="suspensionState.stateCode == 1">
            and RES.SUSPENSION_STATE_ = 1
        </if>
        <if test="suspensionState.stateCode == 2">
            and RES.SUSPENSION_STATE_ = 2
        </if>
      </if>
      <if test="tenantId != null">
        and RES.TENANT_ID_ = #{tenantId}
      </if>
      <if test="tenantIdLike != null">
        and RES.TENANT_ID_ like #{tenantIdLike}
      </if>
      <if test="withoutTenantId">
        and (RES.TENANT_ID_ = '' or RES.TENANT_ID_ is null)
      </if>
      <choose>
        <when test="bothCandidateAndAssigned">
          <if test="userIdForCandidateAndAssignee != null">
            and (RES.ASSIGNEE_ = #{userIdForCandidateAndAssignee} or (RES.ASSIGNEE_ is null and I.USER_ID_ = #{userIdForCandidateAndAssignee} or I.GROUP_ID_ IN (select g.GROUP_ID_ from ACT_ID_MEMBERSHIP g where g.USER_ID_ = #{userIdForCandidateAndAssignee} ) ) )
          </if>
        </when>
      </choose>
    </where>
  </sql>
    <sql id="executionVariableOperator">
    <choose>
      <when test="var.operator.equals('EQUALS')">=</when>
      <when test="var.operator.equals('EQUALS_IGNORE_CASE')">=</when>
      <when test="var.operator.equals('NOT_EQUALS')">&lt;&gt;</when>
      <when test="var.operator.equals('NOT_EQUALS_IGNORE_CASE')">&lt;&gt;</when>
      <when test="var.operator.equals('GREATER_THAN')">&gt;</when>
      <when test="var.operator.equals('GREATER_THAN_OR_EQUAL')">&gt;=</when>
      <when test="var.operator.equals('LESS_THAN')">&lt;</when>
      <when test="var.operator.equals('LESS_THAN_OR_EQUAL')">&lt;=</when>
   </choose>
  </sql>
</mapper>