<?xml version="1.0" encoding="UTF-8" ?>

<!--
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.activiti.engine.impl.persistence.entity.MyHistoricProcessInstanceEntity">

  <!-- HISTORIC PROCESS INSTANCE INSERT -->

  <!-- HISTORIC PROCESS INSTANCE UPDATE -->

  <!-- HISTORIC PROCESS INSTANCE DELETE -->

  <!-- HISTORIC PROCESS INSTANCE RESULT MAP -->
  
  <resultMap id="historicProcessInstanceResultMap" type="org.activiti.engine.impl.persistence.entity.HistoricProcessInstanceEntity">
    <id property="id" column="ID_" jdbcType="VARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="businessKey" column="BUSINESS_KEY_" jdbcType="VARCHAR"/>
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR" />
    <result property="startTime" column="START_TIME_" jdbcType="TIMESTAMP" />
    <result property="endTime" column="END_TIME_" jdbcType="TIMESTAMP" />
    <result property="durationInMillis" column="DURATION_" jdbcType="BIGINT" />
    <result property="startUserId" column="START_USER_ID_" jdbcType="VARCHAR" />
    <result property="startActivityId" column="START_ACT_ID_" jdbcType="VARCHAR" />
    <result property="endActivityId" column="END_ACT_ID_" jdbcType="VARCHAR" />
    <result property="superProcessInstanceId" column="SUPER_PROCESS_INSTANCE_ID_" jdbcType="VARCHAR" />
    <result property="deleteReason" column="DELETE_REASON_" jdbcType="VARCHAR" />
    <result property="tenantId" column="TENANT_ID_" jdbcType="VARCHAR" />
  </resultMap>
  
  <resultMap id="historicProcessInstanceAndVariablesResultMap" type="org.activiti.engine.impl.persistence.entity.HistoricProcessInstanceEntity">
    <id property="id" column="ID_" jdbcType="VARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="businessKey" column="BUSINESS_KEY_" jdbcType="VARCHAR"/>
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR" />
    <result property="startTime" column="START_TIME_" jdbcType="TIMESTAMP" />
    <result property="endTime" column="END_TIME_" jdbcType="TIMESTAMP" />
    <result property="durationInMillis" column="DURATION_" jdbcType="BIGINT" />
    <result property="startUserId" column="START_USER_ID_" jdbcType="VARCHAR" />
    <result property="startActivityId" column="START_ACT_ID_" jdbcType="VARCHAR" />
    <result property="endActivityId" column="END_ACT_ID_" jdbcType="VARCHAR" />
    <result property="superProcessInstanceId" column="SUPER_PROCESS_INSTANCE_ID_" jdbcType="VARCHAR" />
    <result property="deleteReason" column="DELETE_REASON_" jdbcType="VARCHAR" />
    <result property="tenantId" column="TENANT_ID_" jdbcType="VARCHAR" />
   <!--  <collection property="queryVariables" column="EXECUTION_ID_" javaType="ArrayList" ofType="org.activiti.engine.impl.persistence.entity.HistoricVariableInstanceEntity">
      <id property="id" column="VAR_ID_"/>
      <result property="name" column="VAR_NAME_" javaType="String" jdbcType="VARCHAR" />
      <result property="variableType" column="VAR_TYPE_" javaType="org.activiti.engine.impl.variable.VariableType" jdbcType="VARCHAR" />
      <result property="revision" column="VAR_REV_" jdbcType="INTEGER" />
      <result property="processInstanceId" column="VAR_PROC_INST_ID_" jdbcType="VARCHAR" />
      <result property="executionId" column="VAR_EXECUTION_ID_" jdbcType="VARCHAR" />
      <result property="taskId" column="VAR_TASK_ID_" jdbcType="VARCHAR" />
      <result property="byteArrayRef" column="VAR_BYTEARRAY_ID_" typeHandler="ByteArrayRefTypeHandler"/>
      <result property="doubleValue" column="VAR_DOUBLE_" jdbcType="DOUBLE" />
      <result property="textValue" column="VAR_TEXT_" jdbcType="VARCHAR" />
      <result property="textValue2" column="VAR_TEXT2_" jdbcType="VARCHAR" />
      <result property="longValue" column="VAR_LONG_" jdbcType="BIGINT" />
    </collection> -->
  </resultMap>

  <!-- HISTORIC PROCESS INSTANCE SELECT -->
  

  <select id="selectCustomHistoricProcessInstancesByQueryCriteria" parameterType="org.activiti.engine.impl.HistoricProcessInstanceQueryImpl" resultType="map">
  	${limitBefore}
  	<!-- DISTINCT 如果一个流程实例在act_ru_task 中有多个任务，只能选到一个出来 SAD -->
    select DISTINCT RES.* ${limitBetween}

<!--     外部的表加入结果集 -->
    <foreach collection="forms" index="index" item="var">
         , T${index}.* 
    </foreach> 
 <!--     如果流程实例没有结束还有任务 查出来，命名为workStage为历史问题 -->   
    ,R0.NAME_ AS workStage
	,R0.task_def_key_ AS TASK_DEF_KEY
	,R0.id_ as TASK_ID
<!-- 排序的字段 命名别名 如果是外部的表 直接order 字段即可 这里就不需要别名了 -->
    <foreach collection="sortableValues" index="index" item="var">
    	<choose>
    		<when test="!var.isFieldStorageExt">
	  	    	<choose>
		    	<!-- sla剩余时间排序单独处理 -->
		    		<when test="var.orderProperty.equals('happenedtimel') ">
		    		,O1.TEXT_ AS HAPPEN_TIME
		    		,O2.LONG_ as ACCEPT_LIMIT
		    		,O3.LONG_ as HANDLE_LIMIT
		    		</when>
		    		<otherwise>
				     	<if test="var.textValue != null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null">
				          , O${index}.TEXT_ as O${index}
				        </if>
				        <if test="var.textValue2 != null">
				          , O${index}.TEXT2_ as O${index}
				        </if>
				        <if test="var.longValue != null">
				          , O${index}.LONG_ as O${index}
				        </if>
				        <if test="var.doubleValue != null">
				          , O${index}.DOUBLE_ as O${index}
				        </if>   		
		    		</otherwise>
		    	</choose>  		
    		</when>
			<otherwise>
			
			</otherwise>
    	</choose>

      <!--   Null variable type -->
<!--         <if test="var.textValue == null &amp;&amp; var.textValue2 == null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null">
          <choose>
            <when test="var.operator.equals('NOT_EQUALS')">
              and (A${index}.TEXT_ is not null or A${index}.TEXT2_ is not null or A${index}.LONG_ is not null or A${index}.DOUBLE_ is not null or A${index}.BYTEARRAY_ID_ is not null)
            </when>
            <otherwise>
              and A${index}.TEXT_ is null and A${index}.TEXT2_ is null and A${index}.LONG_ is null and A${index}.DOUBLE_ is null and A${index}.BYTEARRAY_ID_ is null
            </otherwise>
          </choose>          
        </if> -->
    </foreach>

    <include refid="selectCustomHistoricProcessInstancesByQueryCriteriaSql"/>

    <!-- ORDER BY -->
 	<choose>
 		<when test="sortableValues.size > 0">
		    <foreach collection="sortableValues" index="index" item="var">	    
		     	<choose>
		    		<when test="!var.isFieldStorageExt">
			           	<choose>
			    		<!-- sla剩余时间排序单独处理 -->
			    		<when test="var.orderProperty.equals('happenedtimel') ">
			    		ORDER BY ACCEPT_LIMIT+HANDLE_LIMIT+HAPPEN_TIME-unix_timestamp(now())*1000 ${var.orderDirection}
			    		</when>	
			    		<otherwise>
				    	ORDER BY O${index} ${var.orderDirection}
				    	</otherwise>	    
				    	</choose>		
		    		</when>
					<otherwise>
					<!-- 只能连接一张业务表。多张不支持  也就是说前面forms，请保持size为1-->
						<choose>
							<when test="var.tableCol != null">
							ORDER BY T0.${var.tableCol} ${var.orderDirection}
							</when>
							<otherwise>
							ORDER BY T0.${var.orderProperty} ${var.orderDirection}
							</otherwise>
						</choose>						
					</otherwise>
		    	</choose>		  
		    </foreach> 			
 		</when>
 		<otherwise>
 			${orderBy}
 		</otherwise>
 	</choose>
    ${limitAfter}
  </select>
  
  <select id="selectCustomHistoricProcessInstanceCountByQueryCriteria" parameterType="org.activiti.engine.impl.HistoricProcessInstanceQueryImpl" resultType="long">
    select count(distinct RES.ID_)
    <include refid="selectCustomHistoricProcessInstancesByQueryCriteriaSql"/>
  </select>
  
  <sql id="selectCustomHistoricProcessInstancesByQueryCriteriaSql">  
    from ${prefix}ACT_HI_PROCINST RES
    <include refid="commonselectCustomHistoricProcessInstancesByQueryCriteriaSql"/>
  </sql>
  
  <sql id="commonselectCustomHistoricProcessInstancesByQueryCriteriaSql">
    <if test="processKeyNotIn != null || processDefinitionKey != null">
      inner join ${prefix}ACT_RE_PROCDEF DEF on RES.PROC_DEF_ID_ = DEF.ID_
    </if>
    
<!--     流程变量排序 --> 
     <foreach collection="sortableValues" index="index" item="var">   
   		     <choose>
	    		<when test="!var.isFieldStorageExt">
			        <choose>
			    	<!-- sla剩余时间排序单独处理 -->
			    		<when test="var.orderProperty.equals('happenedtimel') ">
							inner join ${prefix}ACT_HI_VARINST O1 on RES.PROC_INST_ID_ = O1.PROC_INST_ID_
							inner join ${prefix}ACT_HI_VARINST O2 on RES.PROC_INST_ID_ = O2.PROC_INST_ID_
							inner join ${prefix}ACT_HI_VARINST O3 on RES.PROC_INST_ID_ = O3.PROC_INST_ID_
			    		</when>
			    		<otherwise>
			    			inner join ${prefix}ACT_HI_VARINST O${index} on RES.PROC_INST_ID_ = O${index}.PROC_INST_ID_ 
			    		</otherwise>
			    	</choose>		
	    		</when>
				<otherwise>			
				</otherwise>
	    	</choose>
    </foreach>
    
    <foreach collection="queryVariableValues" index="index" item="queryVariableValue">
      inner join ${prefix}ACT_HI_VARINST  A${index} on RES.PROC_INST_ID_ = A${index}.PROC_INST_ID_
    </foreach> 
    
 <!-- 外部的表， 只能连接一张业务表。多张不支持  也就是说前面forms，请保持size为1-->
     <foreach collection="forms" index="index" item="var">
          inner join ${var.tableName} T${index} on RES.PROC_INST_ID_ = T${index}.BUSINESS_KEY   
    </foreach>
 
<!--     外部表查询字段 --> 
    <foreach collection="queriableFields" index="index" item="var">
    	<if test="var.tableName != null &amp;&amp; var.tableCol != null">
    		inner join ${var.tableName} B${index} on RES.PROC_INST_ID_ = B${index}.BUSINESS_KEY
    	</if>     
    </foreach> 
<!--     如果流程实例没有结束还有任务 查出来 -->
  	LEFT JOIN ACT_RU_TASK R0 on RES.PROC_INST_ID_ = R0.PROC_INST_ID_
    <where>
      <if test="processInstanceId != null">
        RES.PROC_INST_ID_ = #{processInstanceId}
      </if>
      <if test="processInstanceIds != null and !processInstanceIds.isEmpty()">
        and RES.PROC_INST_ID_ in
        <foreach item="item" index="index" collection="processInstanceIds" open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
      <if test="processDefinitionId != null">
        and RES.PROC_DEF_ID_ = #{processDefinitionId}
      </if>
      <if test="processDefinitionKey != null">
        and DEF.KEY_ = #{processDefinitionKey}
      </if>
      <if test="businessKey != null">
        and RES.BUSINESS_KEY_ = #{businessKey}
      </if>

      <if test="startedBefore != null">
        and RES.START_TIME_ &lt;= #{startedBefore}
      </if>
      <if test="startedAfter != null">
        and RES.START_TIME_ &gt;= #{startedAfter}
      </if>
      <if test="finishedBefore != null">
        and RES.END_TIME_ &lt;= #{finishedBefore}
      </if>
      <if test="finishedAfter != null">
        and RES.END_TIME_ &gt;= #{finishedAfter}
      </if>
      <if test="processKeyNotIn != null">
        <foreach collection="processKeyNotIn" index="index" item="procDefKey">
        and DEF.KEY_ not like #{procDefKey}
      </foreach>
      </if>
      <if test="unfinished">
        and RES.END_TIME_ IS NULL
      </if>
      <if test="finished">
        and RES.END_TIME_ is not NULL
      </if>
      <if test="involvedUser != null">
        and (
          exists(select LINK.USER_ID_ from ${prefix}ACT_HI_IDENTITYLINK LINK where USER_ID_ = #{involvedUser} and LINK.PROC_INST_ID_ = RES.ID_)
        )
      </if>
      <if test="startedBy != null">
        and RES.START_USER_ID_ = #{startedBy}
      </if>
      <if test="superProcessInstanceId != null">
        and RES.SUPER_PROCESS_INSTANCE_ID_ = #{superProcessInstanceId}
      </if>
      <if test="excludeSubprocesses">
        and RES.SUPER_PROCESS_INSTANCE_ID_ is null
      </if>
      <if test="tenantId != null">
        and RES.TENANT_ID_ = #{tenantId}
      </if>
      <if test="tenantIdLike != null">
        and RES.TENANT_ID_ like #{tenantIdLike}
      </if>
      <if test="withoutTenantId">
        and (RES.TENANT_ID_ = '' or RES.TENANT_ID_ is null)
      </if>
<!--      流程变量排序 --> 
      <foreach item="var" collection="sortableValues" index="index">   
		     	<choose>
		    		<when test="!var.isFieldStorageExt">
			           	<choose>
			    	<!-- sla剩余时间排序单独处理 -->
			    		<when test="var.orderProperty.equals('happenedtimel') ">
			 		           <!--  排序，针对流程变量排序 taskId要为空 -->
					         	and O1.TASK_ID_ is null    
					         <if test="var.orderProperty != null">
					          	and O1.NAME_= #{var.orderProperty}
					        </if>    	
					        	and O2.TASK_ID_ is null  	
					        	and O2.NAME_= 'acceptLimitl'
					        	and O3.TASK_ID_ is null  	
					        	and O3.NAME_= 'handleLimitl'		        	
			    		</when>
			    		<otherwise>
					           <!--  排序，针对流程变量排序 taskId要为空 -->
					          and O${index}.TASK_ID_ is null    
					         <if test="var.orderProperty != null">
					       	<!--  Match-all variable-names when name is null -->
					          and O${index}.NAME_= #{var.orderProperty}
					        </if> 
						<!-- 注释掉下面的话， 要保证没有重属性名字的变量 -->
					 	<!-- <if test="!var.type.equals('null')">
					          and O${index}.TYPE_ = #{var.type}
					        </if>  -->      		
			    		</otherwise>
			    		</choose>		
		    		</when>
					<otherwise>					
					</otherwise>
		    	</choose>  
      </foreach>
      
      <foreach collection="queryVariableValues" index="index" item="queryVariableValue">
        <if test="queryVariableValue.name != null">
          <!-- Match-all variable-names when name is null -->
          and A${index}.NAME_= #{queryVariableValue.name}
        </if>
        <if test="!queryVariableValue.type.equals('null')">
        <!-- When operator is not-equals or type of value is null, type doesn't matter! -->
          and A${index}.VAR_TYPE_ = #{queryVariableValue.type}
        </if>
        <if test="queryVariableValue.textValue != null &amp;&amp; queryVariableValue.longValue == null &amp;&amp; queryVariableValue.doubleValue == null">
          <choose>
            <when test="queryVariableValue.operator.equals('EQUALS_IGNORE_CASE') || queryVariableValue.operator.equals('NOT_EQUALS_IGNORE_CASE')">
              and lower(A${index}.TEXT_)
            </when>
            <otherwise>
              and A${index}.TEXT_
            </otherwise>
          </choose>
          <choose>
            <when test="queryVariableValue.operator.equals('LIKE')">LIKE</when>
            <otherwise><include refid="executionVariableOperator" /></otherwise>
          </choose>
          #{queryVariableValue.textValue}
        </if>
        <if test="queryVariableValue.textValue2 != null">
        and A${index}.TEXT2_
        <choose>
          <when test="queryVariableValue.operator.equals('LIKE')">LIKE</when>
          <otherwise><include refid="executionVariableOperator" /></otherwise>
        </choose>
          #{queryVariableValue.textValue2}
        </if>
        <if test="queryVariableValue.longValue != null">
        and A${index}.LONG_
        <include refid="executionVariableOperator" />
        #{queryVariableValue.longValue}
        </if>
        <if test="queryVariableValue.doubleValue != null">
        and A${index}.DOUBLE_
        <include refid="executionVariableOperator" />
        #{queryVariableValue.doubleValue}
        </if>
        <!-- Null variable type -->
        <if test="queryVariableValue.textValue == null &amp;&amp; queryVariableValue.textValue2 == null &amp;&amp; queryVariableValue.longValue == null &amp;&amp; queryVariableValue.doubleValue == null">
          <choose>
          <when test="queryVariableValue.operator.equals('NOT_EQUALS')">
            and (A${index}.TEXT_ is not null or A${index}.TEXT2_ is not null or A${index}.LONG_ is not null or A${index}.DOUBLE_ is not null or A${index}.BYTEARRAY_ID_ is not null)
          </when>
          <otherwise>
            and A${index}.TEXT_ is null and A${index}.TEXT2_ is null and A${index}.LONG_ is null and A${index}.DOUBLE_ is null and A${index}.BYTEARRAY_ID_ is null
          </otherwise>
        </choose>
        </if>
      </foreach>
      
<!--       外部表单条件查询 -->
      <foreach item="queryVariableValue" collection="queriableFields" index="index">
         <if test="queryVariableValue.tableName != null &amp;&amp; queryVariableValue.tableCol != null">
          and B${index}.${queryVariableValue.tableCol} 
          <choose>
              <when test="queryVariableValue.operator.equals('LIKE')">LIKE</when>
              <otherwise><include refid="executionVariableOperator" /></otherwise>
          </choose>
          #{queryVariableValue.value}
          </if>
      </foreach>
    
    </where>
  </sql>
  
  <sql id="executionVariableOperator">
    <choose>
      <when test="queryVariableValue.operator.equals('EQUALS')">=</when>
      <when test="queryVariableValue.operator.equals('EQUALS_IGNORE_CASE')">=</when>
      <when test="queryVariableValue.operator.equals('NOT_EQUALS')">&lt;&gt;</when>
      <when test="queryVariableValue.operator.equals('NOT_EQUALS_IGNORE_CASE')">&lt;&gt;</when>
      <when test="queryVariableValue.operator.equals('GREATER_THAN')">&gt;</when>
      <when test="queryVariableValue.operator.equals('GREATER_THAN_OR_EQUAL')">&gt;=</when>
      <when test="queryVariableValue.operator.equals('LESS_THAN')">&lt;</when>
      <when test="queryVariableValue.operator.equals('LESS_THAN_OR_EQUAL')">&lt;=</when>
   </choose>
  </sql>
</mapper>
